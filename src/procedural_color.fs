
// Set the pixel color to an interesting procedural color generated by mixing
// and filtering Perlin noise of different frequencies.
//
// Uniforms:
uniform mat4 view;
uniform mat4 proj;
uniform float animation_seconds;
uniform bool is_moon;
// Inputs:
in vec3 sphere_fs_in;
in vec3 normal_fs_in;
in vec4 pos_fs_in; 
in vec4 view_pos_fs_in; 
// Outputs:
out vec3 color;

// expects: blinn_phong, perlin_noise
void main()
{
  vec3 ka = vec3(0.1);
  vec3 kd = vec3(0.5);
  if (!is_moon){
      kd = vec3(0.1, 0.1, 1.0);
  }
  vec3 ks = vec3(0.8);
  float p = 1000.0;
  float theta = 2 * M_PI * animation_seconds / 4.0;

  mat3 rotation = mat3(cos(theta), 0.0, sin(theta),
                       0.0       , 1.0, 0.0,
                      -sin(theta), 0.0, cos(theta));
  vec3 light_direction = vec3(5, 5, 0);
  vec3 l = normalize(mat3(view) * rotation * light_direction);
  vec3 v = normalize((view_pos_fs_in).xyz);
  vec3 n = normalize(normal_fs_in);
  
  float noise = 0.0;
  vec3 f = vec3(4.18, 4.81, 14.8);
  for (int i = 0; i < 6; i++)
    noise = noise + perlin_noise(sphere_fs_in * f);
  kd *= abs(cos(noise)) + 0.5;

  color = blinn_phong(ka, kd, ks, p, n, v, l);
}







